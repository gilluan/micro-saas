type ProductInfoJSON {
  name: String
  value: Float
  quantity: Int
}

type Order @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  products: [ProductInfoJSON]
  customerID: ID! @index(name: "byCustomer")
}

type CustomerPointsJSON {
  campaignId: ID
  value: Float
  validUntil: AWSDate
}

enum CurrencyEnum {
  BRL
  USD
  EUR
}

type Settings @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  enableWhatsapp: Boolean
  enableSMS: Boolean
  enableEmail: Boolean
  currency: CurrencyEnum
}

type Profile @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  phone: AWSPhone
  email: AWSEmail
  logo: String
  Settings: Settings @hasOne
  Campaigns: [Campaign] @hasMany(indexName: "byProfile", fields: ["id"])
}

type Customer @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  phone: AWSPhone
  email: AWSEmail
  points: Int
  history: CustomerPointsJSON
  Orders: [Order] @hasMany(indexName: "byCustomer", fields: ["id"])
}

type Campaign @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  startsAt: AWSDate
  finishesAt: AWSDate
  validFrom: AWSDate
  validUntil: AWSDate
  minValue: Float
  bonus: Int
  profileID: ID! @index(name: "byProfile")
}
